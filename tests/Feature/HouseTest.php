<?php

namespace Tests\Feature;

use App\Http\Controllers\Admins\HouseController;
use App\Models\House;
use App\Models\Proberty;
use App\Models\Season;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class HouseTest extends TestCase
{

    ///=====Set up for start testing=======//
    protected $user;
    protected $email = 'firstTest@gmail.com';
    protected $password = 12345678;
    protected $old;
    protected $old_data;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::firstOrCreate(['email' => $this->email], [
            'email' => $this->email,
            'name' => 'first',
            'type' => 'admin',
            'password' => bcrypt($this->password),
        ]);

        $this->old_data = [
            'name' => fake()->text(15),
            'describe' => fake()->text(25),
            'default_price' => fake()->numberBetween(100, 1000),
            'created_by' => $this->user->id
        ];
    }

    /**
     * A user open index
     *
     * @return void
     */
    public function testAdminOpenHouseIndex()
    {
        $response = $this->actingAs($this->user)->get('/Admins/houses');
        $response->assertSee(trans('houses'));
    }
//

    /**
     * A user Add New houses
     *
     * @return void
     */
    public function testAdminAddNewHouse()
    {
        $proberty = Proberty::create([
            'title' => fake()->text(15),
            'describe' => fake()->text(25),
            'created_by' => $this->user->id
        ]);
        $season = Season::create([
            'name' => 'test_season',
            'describe' => 'test description',
            'start' => '2022-12-20',
            'end' => '2022-12-21',
            'created_by' => $this->user->id
        ]);
        $name = fake()->text(15);
        $description = fake()->text(25);
        $data = [
            'name' => $name,
            'describe' => $description,
            'default_price' => fake()->numberBetween(100, 1000),
            'created_by' => $this->user->id,
            'properties' => [
                $proberty->id => 'on'
            ],
            'season_price' => [
                $season->id => "" . fake()->numberBetween(100, 1000) . ""
            ]
        ];

        $response = $this->actingAs($this->user)->post('/Admins/houses', $data);
        $this->assertDatabaseHas('houses',
            ['name' => $name,
            'describe' => $description]);
        $response->assertRedirect('/Admins/houses');
        $response->assertSee(trans('houses'));
    }

//
    /**
     * A user update houses
     *
     * @return void
     */
    public function testAdminUpdateHouse()
    {

        $proberty = Proberty::create([
            'title' => fake()->text(15),
            'describe' => fake()->text(25),
            'created_by' => $this->user->id
        ]);
        $season = Season::create([
            'name' => 'test_season',
            'describe' => 'test description',
            'start' => '2022-12-20',
            'end' => '2022-12-21',
            'created_by' => $this->user->id
        ]);
        $name = fake()->text(15);
        $description = fake()->text(25);
        $newData = [
            'name' => $name,
            'describe' => $description,
            'default_price' => fake()->numberBetween(100, 1000),
            'created_by' => $this->user->id,
            'properties' => [
                $proberty->id => 'on'
            ],
            'season_price' => [
                $season->id => "" . fake()->numberBetween(100, 1000) . ""
            ]
        ];
        $hous_controle=new HouseController();
        $house = House::create($newData);
        if (\request('season_price'))
            $house->seasons()->attach($hous_controle->prices($newData['season_price']));

        $house->properties()->attach(array_keys($newData['properties']));

        $response = $this->actingAs($this->user)->put('Admins/houses/' . $house->id, $newData);
        $response->assertRedirect('/Admins/houses');
        $response->assertSee(trans('houses'));
    }


}
