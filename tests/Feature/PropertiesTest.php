<?php

namespace Tests\Feature;

use App\Models\Proberty;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PropertiesTest extends TestCase


{
    use DatabaseTransactions;

    ///=====Set up for start testing=======//
    protected $user;
    protected $email = 'firstTest@gmail.com';
    protected $password = 12345678;
    protected $old;
    protected $old_data;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::firstOrCreate(['email' => $this->email], [
            'email' => $this->email,
            'name' => 'first',
            'type' => 'admin',
            'password' => bcrypt($this->password),
        ]);

        $this->old_data = [
            'title' => 'test Title',
            'describe' => 'test description2',
            'created_by' => $this->user->id
        ];
        ///===========Put old Data to check times============///
        $this->old = Proberty::create($this->old_data);
    }

    /**
     * A user open index
     *
     * @return void
     */
    public function testAdminOpenPropertyIndex()
    {
        $response = $this->actingAs($this->user)->get('/Admins/properties');
        $response->assertSee(trans('admin.properties'));
    }

    /**
     * A user Add New Property
     *
     * @return void
     */
    public function testAdminAddNewProperty()
    {
        $inputforTest = [
            'title'=>fake()->text(15),
            'describe'=>fake()->text(20),
            'created_by' => $this->user->id
        ];
        $response = $this->actingAs($this->user)->post('/Admins/properties', $inputforTest);
        $this->assertDatabaseHas('properties', $inputforTest);
        $response->assertRedirect('/Admins/properties');
        $response->assertSee(trans('admin.properties'));
    }


    /**
     * A user update property
     *
     * @return void
     */
    public function testAdminUpdateProberty()
    {

        $element = Proberty::create($this->old_data);
        $newData = [
            'title' => 'proberty',
            'describe' => 'test description552',
        ];
        $response = $this->actingAs($this->user)->put('Admins/properties/' . $element->id, $newData);
        $this->assertDatabaseHas('properties', $newData);
        //=====Method NotAllow====//
        $response->assertRedirect('/Admins/properties');
        $response->assertSee(trans('admin.properties'));
    }




}
