<?php

namespace Tests\Feature;

use App\Models\Season;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SeasonTest extends TestCase
{
    use DatabaseTransactions;

    ///=====Set up for start testing=======//
    protected $user;
    protected $email = 'firstTest@gmail.com';
    protected $password = 12345678;
    protected $old;
    protected $old_data;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::firstOrCreate(['email' => $this->email], [
            'email' => $this->email,
            'name' => 'first',
            'type' => 'admin',
            'password' => bcrypt($this->password),
        ]);
        $this->old_data = [
            'name' => 'test_season2',
            'describe' => 'test description2',
            'start' => '2022-12-22',
            'end' => '2022-12-22',
            'created_by' => $this->user->id
        ];
        ///===========Put old Data to check times============///
        $this->old = Season::create($this->old_data);
    }

    /**
     * A user open index
     *
     * @return void
     */
    public function testAdminOpenSeasonIndex()
    {
        $response = $this->actingAs($this->user)->get('/Admins/seasons');
        $response->assertSee(trans('seasons'));
    }

    /**
     * A user Add New Season
     *
     * @return void
     */
    public function testAdminAddNewSeason()
    {
        $inputforTest = [
            'name' => 'test_season',
            'describe' => 'test description',
            'start' => '2025-12-20',
            'end' => '2025-12-21',
            'created_by' => $this->user->id
        ];
        $response = $this->actingAs($this->user)->post('/Admins/seasons', $inputforTest);
        $this->assertDatabaseHas('seasons', $inputforTest);
        $response->assertRedirect('/Admins/seasons');
        $response->assertSee(trans('seasons'));
    }

    /**
     * A user Add New Season with check if another season in same time
     *
     * @return void
     */
    public function testAdminAddNewSeasonWithOtherSeasonInsideSameTime()
    {
        $response = $this->actingAs($this->user)->post('/Admins/seasons/create', $this->old_data);
        $this->assertDatabaseHas('seasons', $this->old_data);
        //=====Method NotAllow====//
        $response->assertStatus(405);
        $response->assertSee(trans('kindly choose another time you have another season in same time '));
    }

    /**
     * A user update Season
     *
     * @return void
     */
    public function testAdminUpdateSeason()
    {

        $element = Season::create($this->old_data);
        $newData = [
            'name' => 'test_season552',
            'describe' => 'test description552',
            'start' => '2022-12-22',
            'end' => '2022-12-22',
        ];
        $response = $this->actingAs($this->user)->put('Admins/seasons/' . $element->id, $newData);
        $this->assertDatabaseHas('seasons', $newData);
        //=====Method NotAllow====//
        $response->assertRedirect('/Admins/seasons');
        $response->assertSee(trans('seasons'));
    }


    /**
     * A user Delete Season
     *
     * @return void
     */
//    public function testAdminDeleteSeason()
//    {
//        $newData = [
//            'name' => 'test_season5525',
//            'describe' => 'test description5526',
//            'start' => '2022-12-22',
//            'end' => '2022-12-22',
//        ];
//        $element = Season::create($newData);
//        $newData['id'] = $element->id;
//
//
//        $response = $this->actingAs($this->user)->call('DELETE', 'Admins/seasons/' . $element->id,['_token' => csrf_token()]);
//        $this->assertEquals(302, $response->getStatusCode());
//        $this->assertDatabaseMissing('seasons', ['id' => $element->id]);
//
//        //=====Method NotAllow====//
//        $response->assertRedirect('/Admins/seasons');
//        $response->assertSee(trans('seasons'));
//    }


}
